{
  "additionalProperties": false,
  "description": "Modifies the original Settings class provided by the user",
  "properties": {
    "mongo_dsn": {
      "description": "MongoDB connection string. Might include credentials. For more information see: https://naiveskill.com/mongodb-connection-string/",
      "examples": [
        "mongodb://localhost:27017"
      ],
      "format": "multi-host-uri",
      "minLength": 1,
      "title": "Mongo Dsn",
      "type": "string"
    },
    "db_name": {
      "description": "Name of the database located on the MongoDB server.",
      "examples": [
        "my-database"
      ],
      "title": "Db Name",
      "type": "string"
    },
    "mongo_timeout": {
      "anyOf": [
        {
          "exclusiveMinimum": 0,
          "type": "integer"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "Timeout in seconds for API calls to MongoDB. The timeout applies to all steps needed to complete the operation, including server selection, connection checkout, serialization, and server-side execution. When the timeout expires, PyMongo raises a timeout exception. If set to None, the operation will not time out (default MongoDB behavior).",
      "examples": [
        300,
        600,
        null
      ],
      "title": "Mongo Timeout"
    },
    "db_version_collection": {
      "description": "The name of the collection containing DB version information for this service",
      "examples": [
        "ifrsDbVersions"
      ],
      "title": "Db Version Collection",
      "type": "string"
    },
    "migration_wait_sec": {
      "description": "The number of seconds to wait before checking the DB version again",
      "examples": [
        5,
        30,
        180
      ],
      "title": "Migration Wait Sec",
      "type": "integer"
    },
    "migration_max_wait_sec": {
      "anyOf": [
        {
          "type": "integer"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "The maximum number of seconds to wait for migrations to complete before raising an error.",
      "examples": [
        null,
        300,
        600,
        3600
      ],
      "title": "Migration Max Wait Sec"
    },
    "notification_topic": {
      "description": "Name of the topic used for notification events.",
      "examples": [
        "notifications"
      ],
      "title": "Notification Topic",
      "type": "string"
    },
    "notification_type": {
      "description": "The type used for notification events.",
      "examples": [
        "notification"
      ],
      "title": "Notification Type",
      "type": "string"
    },
    "access_request_topic": {
      "description": "Name of the event topic containing access request events",
      "examples": [
        "access-requests"
      ],
      "title": "Access Request Topic",
      "type": "string"
    },
    "user_topic": {
      "default": "users",
      "description": "The name of the topic containing user events.",
      "title": "User Topic",
      "type": "string"
    },
    "auth_topic": {
      "description": "The name of the topic containing auth-related events.",
      "examples": [
        "auth-events"
      ],
      "title": "Auth Topic",
      "type": "string"
    },
    "second_factor_recreated_type": {
      "description": "The event type for recreation of the second factor for authentication",
      "examples": [
        "second_factor_recreated"
      ],
      "title": "Second Factor Recreated Type",
      "type": "string"
    },
    "iva_state_changed_topic": {
      "description": "The name of the topic containing IVA events.",
      "examples": [
        "ivas"
      ],
      "title": "Iva State Changed Topic",
      "type": "string"
    },
    "iva_state_changed_type": {
      "description": "The type to use for iva state changed events.",
      "examples": [
        "iva_state_changed"
      ],
      "title": "Iva State Changed Type",
      "type": "string"
    },
    "service_name": {
      "default": "nos",
      "description": "The Notification Orchestration Service controls the creation of notification events.",
      "title": "Service Name",
      "type": "string"
    },
    "service_instance_id": {
      "description": "A string that uniquely identifies this instance across all instances of this service. This is included in log messages.",
      "examples": [
        "germany-bw-instance-001"
      ],
      "title": "Service Instance Id",
      "type": "string"
    },
    "kafka_servers": {
      "description": "A list of connection strings to connect to Kafka bootstrap servers.",
      "examples": [
        [
          "localhost:9092"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "Kafka Servers",
      "type": "array"
    },
    "kafka_security_protocol": {
      "default": "PLAINTEXT",
      "description": "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL.",
      "enum": [
        "PLAINTEXT",
        "SSL"
      ],
      "title": "Kafka Security Protocol",
      "type": "string"
    },
    "kafka_ssl_cafile": {
      "default": "",
      "description": "Certificate Authority file path containing certificates used to sign broker certificates. If a CA is not specified, the default system CA will be used if found by OpenSSL.",
      "title": "Kafka Ssl Cafile",
      "type": "string"
    },
    "kafka_ssl_certfile": {
      "default": "",
      "description": "Optional filename of client certificate, as well as any CA certificates needed to establish the certificate's authenticity.",
      "title": "Kafka Ssl Certfile",
      "type": "string"
    },
    "kafka_ssl_keyfile": {
      "default": "",
      "description": "Optional filename containing the client private key.",
      "title": "Kafka Ssl Keyfile",
      "type": "string"
    },
    "kafka_ssl_password": {
      "default": "",
      "description": "Optional password to be used for the client private key.",
      "format": "password",
      "title": "Kafka Ssl Password",
      "type": "string",
      "writeOnly": true
    },
    "generate_correlation_id": {
      "default": true,
      "description": "A flag, which, if False, will result in an error when trying to publish an event without a valid correlation ID set for the context. If True, a new correlation ID will be generated and used in the event header.",
      "examples": [
        true,
        false
      ],
      "title": "Generate Correlation Id",
      "type": "boolean"
    },
    "kafka_max_message_size": {
      "default": 1048576,
      "description": "The largest message size that can be transmitted, in bytes, before compression. Only services that have a need to send/receive larger messages should set this. When used alongside compression, this value can be set to something greater than the broker's `message.max.bytes` field, which effectively concerns the compressed message size.",
      "examples": [
        1048576,
        16777216
      ],
      "exclusiveMinimum": 0,
      "title": "Kafka Max Message Size",
      "type": "integer"
    },
    "kafka_compression_type": {
      "anyOf": [
        {
          "enum": [
            "gzip",
            "snappy",
            "lz4",
            "zstd"
          ],
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "The compression type used for messages. Valid values are: None, gzip, snappy, lz4, and zstd. If None, no compression is applied. This setting is only relevant for the producer and has no effect on the consumer. If set to a value, the producer will compress messages before sending them to the Kafka broker. If unsure, zstd provides a good balance between speed and compression ratio.",
      "examples": [
        null,
        "gzip",
        "snappy",
        "lz4",
        "zstd"
      ],
      "title": "Kafka Compression Type"
    },
    "kafka_max_retries": {
      "default": 0,
      "description": "The maximum number of times to immediately retry consuming an event upon failure. Works independently of the dead letter queue.",
      "examples": [
        0,
        1,
        2,
        3,
        5
      ],
      "minimum": 0,
      "title": "Kafka Max Retries",
      "type": "integer"
    },
    "kafka_enable_dlq": {
      "default": false,
      "description": "A flag to toggle the dead letter queue. If set to False, the service will crash upon exhausting retries instead of publishing events to the DLQ. If set to True, the service will publish events to the DLQ topic after exhausting all retries",
      "examples": [
        true,
        false
      ],
      "title": "Kafka Enable DLQ",
      "type": "boolean"
    },
    "kafka_dlq_topic": {
      "default": "dlq",
      "description": "The name of the topic used to resolve error-causing events.",
      "examples": [
        "dlq"
      ],
      "title": "Kafka DLQ Topic",
      "type": "string"
    },
    "kafka_retry_backoff": {
      "default": 0,
      "description": "The number of seconds to wait before retrying a failed event. The backoff time is doubled for each retry attempt.",
      "examples": [
        0,
        1,
        2,
        3,
        5
      ],
      "minimum": 0,
      "title": "Kafka Retry Backoff",
      "type": "integer"
    },
    "log_level": {
      "default": "INFO",
      "description": "The minimum log level to capture.",
      "enum": [
        "CRITICAL",
        "ERROR",
        "WARNING",
        "INFO",
        "DEBUG",
        "TRACE"
      ],
      "title": "Log Level",
      "type": "string"
    },
    "log_format": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "If set, will replace JSON formatting with the specified string format. If not set, has no effect. In addition to the standard attributes, the following can also be specified: timestamp, service, instance, level, correlation_id, and details",
      "examples": [
        "%(timestamp)s - %(service)s - %(level)s - %(message)s",
        "%(asctime)s - Severity: %(levelno)s - %(msg)s"
      ],
      "title": "Log Format"
    },
    "log_traceback": {
      "default": true,
      "description": "Whether to include exception tracebacks in log messages.",
      "title": "Log Traceback",
      "type": "boolean"
    },
    "central_data_stewardship_email": {
      "description": "The email address of the central data steward.",
      "title": "Central Data Stewardship Email",
      "type": "string"
    },
    "helpdesk_email": {
      "description": "The email address of the GHGA Helpdesk.",
      "title": "Helpdesk Email",
      "type": "string"
    }
  },
  "required": [
    "mongo_dsn",
    "db_name",
    "db_version_collection",
    "migration_wait_sec",
    "notification_topic",
    "notification_type",
    "access_request_topic",
    "auth_topic",
    "second_factor_recreated_type",
    "iva_state_changed_topic",
    "iva_state_changed_type",
    "service_instance_id",
    "kafka_servers",
    "central_data_stewardship_email",
    "helpdesk_email"
  ],
  "title": "ModSettings",
  "type": "object"
}